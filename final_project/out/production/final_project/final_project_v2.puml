@startuml
    loop Till user defines they are done adding tips
        loop Till all input is correct
            User -> User: Input Order ID
            User -> User: Input Sale Amount
            User -> User: Input Tip Amount
            User -> HTTP: Send all inputs
            HTTP -> Main: Send all inputs
            Main -> Exception: Order ID is an int
            Exception --> Main: Incorrect Input
            Main -> Exception: Sale Amount is a double
            Exception --> Main: Incorrect Input
            Main -> Exception: Tip Amount is a double
            Exception --> Main: Incorrect Input
            Main --> HTTP: Incorrect Input:\nGive user another chance to enter
            HTTP --> User: Incorrect Input:\nGive user another chance to enter
        end
        Exception -> Main: All inputs are correct
        Main -> Collection: Add all inputs into collection
        Main -> HTTP: Sends all clear response
        HTTP -> User: Asks if they are done\nentering tips for the day
    end
    User -> HTTP: User inputs they are done
    HTTP -> Main: Communicates all done entering tips
    Main -> Collection: Requests all inputs form Collection
    Collection -> Main: Provides all inputs
    Main -> Thread: Threads all the tips and runs all concurrently
    Thread -> Main: All inputs ran
    Main -> HTTP: Sends all inputs
    HTTP -> User: Displays all inputs the user has entered and\nasks if they would like to store all inputs
    group User enters Y
        User -> HTTP: User inputs Y
        HTTP -> Main: Communicates user input
        Main -> Document: Writes all inputs to a document
    end
    group User enters N
        User -> HTTP: User inputs N
        HTTP -> Main: Communicates user input
        Main -> Collection: Clears all entered tips for the day
    end
    Main -> HTTP: Thanks the user for using the program and shuts down
    HTTP -> User: Displays program shutdown message to user
@enduml